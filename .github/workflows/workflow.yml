# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  push:
    branches: [ hw1 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtest-dev
          cd /usr/src/gtest
          sudo cmake .
          sudo make
          sudo cp ./lib/*.a /usr/lib
          cd -
          sudo apt-get install -y python3
          sudo apt-get install -y python3-pip
          sudo apt-get install -y cmake
          sudo apt-get install -y cppcheck
          sudo apt-get install -y gcovr
          # sudo pip install gcovr
          # sudo apt-get install -y lynx
          sudo apt-get install -y valgrind
          sudo apt-get install -y clang-format
          sudo apt-get install -y clang-tidy
          sudo pip install scan-build
          sudo pip install cpplint

      - name: TestAndTime
        run: |
          rm -rf build
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Release -DWPADDED=1
          sudo make install -C build
          rm -rf build
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DTESTS=1 -DBUILD_STATIC=1 -DWPADDED=1
          make -C build
          cd build && ctest --output-on-failure
          cd ..
          cp build/main main_static
          rm -rf build
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED=1 -DTESTS=1 -DWPADDED=1
          make -C build
          cd build && ctest --output-on-failure
          cd ..
          cp build/main main_shared
          rm -rf build
          sudo chmod +x ./main_static
          sudo chmod +x ./main_shared
          sudo time ./main_static
          sudo time ./main_shared

      - name: StaticSanitize
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_STATIC=1 -DSANITIZERS=1
          make -C build
          cd build && ctest --output-on-failure

      - name: StaticAnalyze
        run: |
          curl -sSL "https://github.com/facebook/infer/releases/download/v1.1.0/infer-linux64-v1.1.0.tar.xz" |
          sudo tar -C /opt -xJ && sudo ln -s "/opt/infer-linux64-v1.1.0/bin/infer" /usr/local/bin/infer
          sudo pip install scan-build
          sudo pip install cpplint
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_STATIC=1 -DANALYSERS=1
          make -C build
          cd build && make analysers

      - name: StaticValgrind
        run: |
          cmake -B build -DBUILD_STATIC=1 -DVALGRIND=1
          make -C build
          cd build/ && valgrind --leak-check=yes ctest

      - name: SharedSanitize
        run: |
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Debug
          sudo make install -C build
          rm -rf build
          cmake -B build -DBUILD_LIB=1 -DSANITIZERS=1 -DCMAKE_BUILD_TYPE=Release
          make -C build
          cd build && ctest --output-on-failure

      - name: SharedAnalyze
        run: |
          #curl -sSL "https://github.com/facebook/infer/releases/download/v1.1.0/infer-linux64-v1.1.0.tar.xz" |
          #sudo tar -C /opt -xJ && sudo ln -s "/opt/infer-linux64-v1.1.0/bin/infer" /usr/local/bin/infer
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Debug
          sudo make install -C build
          rm -rf build
          cmake -B build -DBUILD_LIB=1 -DANALYSERS=1 -DCMAKE_BUILD_TYPE=Release
          make -C build
          cd build && make analysers

      - name: SharedValgrind
        run: |
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Debug
          sudo make install -C build
          rm -rf build
          cmake -B build -DBUILD_LIB=1 -DVALGRIND=1 -DCMAKE_BUILD_TYPE=Release
          make -C build
          cd build/ && valgrind --leak-check=yes ctest

      - uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Coverage
        run: |
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Debug
          sudo make install -C build
          rm -rf build s
          cmake -B build -DBUILD_STATIC=1 -DCOVERAGE=1 -DCMAKE_BUILD_TYPE=Release
          make -C build libstatic_test
          cmake -B build -DBUILD_LIB=1 -DCMAKE_BUILD_TYPE=Debug -DCOVERAGE=1
          sudo make install -C build
          cd build && ctest .
          cd ..
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -f <(gcovr -e '.*/tests/.*' -x)